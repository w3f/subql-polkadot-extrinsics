type Extrinsic @entity {
  id: ID!
  block_hash: String!
  block_nr: Int!
  timestamp: String!
  signer: String!
  module: String!
  method: String!
  result: String
  docs: [String]!
  parameters: [Parameter]! @derivedFrom(field: "extrinsic") 
  call_data: String
}

type Parameter @entity {
  id: ID!
  name: String!
  type: Int!
  typeName: String!
  typeName2: String!
  docs: [String]!
  extrinsic: Extrinsic!
  value: String!
}

##### Reward and Staking #####
type SumReward @entity{
  id: ID! # AccountId
  accountReward: BigInt!
  accountSlash: BigInt!
  accountTotal: BigInt!
  rewards: [StakingReward] @derivedFrom(field: "account")
  slashs: [StakingSlash] @derivedFrom(field: "account")
}

# in early stage of kusama, some validators didn't need to bond to start staking
type NoBondRecordAccount @entity {
  id: ID! # AccountId
  firstRewardAt: Int!
}

type StakingReward @entity{
  id: ID! #blockHeight-eventIdx
  account: SumReward!
  balance: BigInt!
  date: Date!
}

type StakingSlash @entity{
  id: ID! #blockHeight-eventIdx
  account: SumReward!
  balance: BigInt!
  date: Date!
}

##### Transfer and BatchCalls #####
type Account @entity {
  id: ID!
  transfers: [Transfer] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!
  amount: BigInt
  to: Account!
  from: Account!
}

type BatchCall @entity {
  id: ID!
  signer: String!
  block_hash: String!
  block_nr: Int!
  timestamp: String!
  module: String!
  method: String!
  parentCall: BatchCall
  childCalls: [BatchCall] @derivedFrom(field: "parentCall")
  parameters: [BatchParameter]! @derivedFrom(field: "batchCall")
}

type BatchParameter @entity {
  id: ID!
  batchCall: BatchCall!
  name: String!
  value: String!
}

type SetController @entity {
  id: ID! #blockHeight-eventIdx
  stash: String!
  controller: String!
}